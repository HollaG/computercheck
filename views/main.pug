extends layout
block content

    //- // Navigation
    //- nav.navbar.navbar-light.bg-light.static-top
    //-     .container
    //-         a.navbar-brand(href="#!") Start Bootstrap
    //-         a.btn.btn-primary(href="#signup") Sign Up
    // Masthead
    header.masthead
        .container.position-relative
            .row.justify-content-center
                .col-xl-6
                    .text-center.text-white                        
                        h1.mb-5 Search for a laptop from #{getRandomName()} and more              
                        form#searchForm(action='/' method='get')                           
                            .row
                                .col
                                    input#modelSearch.form-control.form-control-lg(type="text" placeholder="Search model..." name='search' value=original maxlength="75")                                    
                                .col-auto
                                    button#submitButton.btn.btn-primary.btn-lg(type="submit") SEARCH               

    .container.py-4#overall-container
        .container
            .d-flex.justify-content-between
                if (original)
                    h2.fs-4 #{numberOfModels} search results for '#{original}'
                else
                    h2.fs-4 #{numberOfModels} results
                    
                //- button.btn.btn-primary.text-nowrap(onclick="toggleExpand(this)") Expand all
                //- button.btn.btn-primary#load-all-btn.text-nowrap.px-3(onclick='loadMore("all")')
                //-     i.me-2.plus-icon(class="fas fa-plus")
                //-     i.me-2.spinner-icon(class="fas fa-spinner fa-pulse" style='display:none')

                //-     p.d-inline Load all



            .d-flex.align-items-center.flex-wrap
                
                button.text-nowrap.me-4.btn.btn-light.px-3.my-2#toggle-filters-btn(data-mdb-ripple-color="dark" data-mdb-toggle="modal" data-mdb-target="#filterModal") 

                    i(class="fas fa-filter")
                    p.fw-bold.d-inline-block.my-0.ms-2.me-0 FILTERS
                
        .d-flex.flex-wrap.mt-3#item-container
            - let counter = 0
            each products, model_ID in data

                - if (!modelData[model_ID]) modelData[model_ID] = [{}]
                - let model = modelData[model_ID][0]
                .col-12.col-xl-3.col-lg-4.col-md-6
                    -
                        let locations = []
                        let totalprice = []
                        for (location of Object.keys(products)) { 
                            locations.push(location)
                            for (product of products[location]) totalprice.push(Number(product.price))
                        }
                        let avgPrice = Math.round((totalprice.reduce((a, b) => a + b, 0)) / totalprice.length)

                        let filters = {
                            brand: model.brand,                            
                            processor_company: model.processor_company_clean,
                            processor_model: model.processor_model_clean,
                            ram: model.ram_clean,
                            screen_size: model.screen_clean,
                            os: model.os_clean,
                            locations,
                            weight: model.weight_clean,
                            price: avgPrice
                        }
                        
                    .card.m-2.product(data-terms=JSON.stringify(filters))
                        .bg-image.hover-overlay.ripple(data-mdb-ripple-color="light")
                            a(href=`/${encodeURIComponent(model.brand)}/${encodeURIComponent(model_ID)}` title=`Link for model ${model_ID}` rel="noopener")
                                img.lozad.card-img-top.fixed-size(src='/images/loading.jpg' data-src=`${modelData[model_ID] ? (model.image_url ? model.image_url : "/images/missing.jpg") : "/images/missing.jpg"}` alt=`Image for model ${model_ID}`)
                        .card-body.parent-relative-apply.d-flex.flex-column.pb-0
                            p.text-muted.fw-light.text-center.small-text #{model.brand} #{model_ID}
                            a(href=`/${encodeURIComponent(model.brand)}/${encodeURIComponent(model_ID)}` title=`Link for model ${model_ID}` rel="noopener").text-truncate.mt-2.card-title=model.name
                            .container-fluid.px-0.mt-2.pt-1
                                mixin prices(location)
                                    .container.mb-2.pb-2
                                        img.d-inline-block.logo-image(src=`/images/logos/${location.replace(/ /g, "_").toLowerCase()}.jpg`  alt=`Image for location ${location}`)
                                        p.ms-2.mb-0.d-inline-block=location
                                        
                                        - let numOOS = 0
                                        each product in products[location]
                                            if (product.active == 1)
                                                a.float-end(href=product.link target="_blank" title=`Link for model ${model_ID} to ${location}` rel="noopener") $#{product.price}
                                                br
                                            //- TODO: Show or hide inactive products?                                
                                            else
                                                - numOOS++
                                            //-     a.text-decoration-line-through.float-end(href=product.link target="_blank") $#{product.price}
                                            if (product.customizable == 1)
                                                a.float-end(href=product.link target="_blank" title=`Link for model ${model_ID} to ${location}` rel="noopener") (Customizable)
                                                br
                                        if (numOOS != 0)
                                            if (numOOS == 1)
                                                a.float-end(href=products[location][0].link target="_blank"  title=`Link for model ${model_ID} to ${location}` rel="noopener") Out of stock
                                                br
                                            else
                                                a.float-end(href=`/${encodeURIComponent(model.brand)}/${encodeURIComponent(model_ID)}` title=`Link for model ${model_ID}` rel="noopener") #{numOOS} out of stock
                                                br
                                            
                                                
                                each prodsInLoc, location in products
                                    +prices(location)





                            .card-footer.mt-auto
                                .row.mt-1
                                    .col-5
                                        p.small-text.fw-bold Processor
                                    .col-7
                                        -
                                            let processorText =`${model.processor_company} ${model.processor_model}`
                                            if (model.processor_company == "-" || model.processor_model == "-") processorText = "Unknown"

                                        p.small-text=processorText
                                .row
                                    .col-5
                                        p.small-text.fw-bold RAM
                                    .col-7
                                        -
                                            let ramText = `${model.ram} GB`
                                            if (model.ram == -1 || model.ram == 0) ramText = "Unknown"
                                        p.small-text=ramText
                                .row
                                    .col-5
                                        p.small-text.fw-bold Storage
                                    .col-7
                                        -
                                            let storageText = model.storage
                                            if (model.storage == "-" || model.storage === "") storageText == "Unknown"
                                        p.small-text=storageText

                                .container-fluid.p-0.m-0.collapse.hiding(id=`collapse-${counter}`)
                                    .row
                                        .col-5
                                            p.small-text.fw-bold Graphics
                                        .col-7
                                            -
                                                let gpuText = model.graphics_card
                                                if (model.graphics_card == "-" || model.graphics_card === "") gpuText = "Unknown"
                                            p.small-text=gpuText
                                    .row
                                        .col-5
                                            p.small-text.fw-bold Screen size
                                        .col-7
                                            -
                                                let screenSizeText = `${model.screen_size} inch`

                                                if (model.screen_size == -1 || model.screen_size == 0) screenSizeText = "Unknown"
                                            p.small-text #{screenSizeText}
                                    .row
                                        .col-5
                                            p.small-text.fw-bold Resolution
                                        .col-7
                                            -
                                                let screenResolutionText = `${model.screen_resolution_w} x ${model.screen_resolution_h}`
                                                if (model.screen_resolution_w == "-1" || model.screen_resolution_h == "-1") screenResolutionText = "Unknown"
                                            p.small-text=screenResolutionText
                                    .row
                                        .col-5
                                            p.small-text.fw-bold OS
                                        .col-7
                                            -
                                                let osText = model.os
                                                if (model.os == "-" || !model.os) osText = "Unknown"
                                            p.small-text=osText
                                    .row
                                        .col-5
                                            p.small-text.fw-bold Weight
                                        .col-7
                                            -
                                                let weightText = model.weight_clean == "Unknown" ? "Unknown" : `${Number(model.weight_clean) > 1000 ? `${Number(model.weight_clean)/1000}kg` : `${model.weight_clean}g`}`
                                            p.small-text #{weightText}
                                                
                                .row.mb-1
                                    .container.text-center
                                        a.view-more-btn(id=`button-${counter}` role='button' data-mdb-toggle="collapse" data-mdb-target=`#collapse-${counter}` aria-expanded="false" onclick='toggleView(this)') 
                                            p.d-inline-block.me-1 View more specs
                                            i.unflipped(class="fas fa-angle-down")


                - counter++
        .container.text-center.my-3
            if (ended)
                //- p.fst-italic#loaded-text All items loaded.
            else 
                button.btn.btn-primary#load-more-btn.px-3(onclick='loadMore()') 
                    i.me-2.plus-icon(class="fas fa-plus")
                    i.me-2.spinner-icon(class="fas fa-spinner fa-pulse" style='display:none')
                    p.d-inline LOAD MORE
                
                p.fst-italic#loaded-text(style='display:none') All items loaded.
    
    .modal.fade(tabindex='-1')#filterModal
        .modal-dialog
            .modal-content
                .modal-header
                    h5.modal-title Filters (0)
                    button.btn-close(type='button' data-mdb-dismiss='modal' aria-label='Close')
                .modal-body
                    .container-fluid
                        #accordian-filters.accordion
                            

                            .accordion-item
                                h2#accordian-brand-heading.accordion-header
                                    button.accordion-button.collapsed(type='button' data-mdb-toggle='collapse' data-mdb-target='#accordian-brand-container' aria-expanded='false' aria-controls='accordian-brand-container')
                                        .div
                                            p.mb-0.fw-bold Brand                                            
                                            p.mb-0.font-small#brand-number 0 filters selected
                                #accordian-brand-container.accordion-collapse.collapse(aria-labelledby='accordian-brand-heading')
                                    .accordion-body
                                        each brand in dataObj.brands
                                            button.btn.btn-light.btn-rounded.btn-sm.mb-2.me-2(id=`brand:${encodeID(brand.brand)}-btn` type='button' data-mdb-toggle="button" onclick=`filter('brand:${brand.brand}', '', '', this)`)
                                                
                                                p.d-inline.me-1.pe-1 #{brand.brand} (#{brand.total})
                                                i.cross(class="fas fa-plus")
                                            
                            .accordion-item
                                h2#accordian-location-heading.accordion-header
                                    button.accordion-button.collapsed(type='button' data-mdb-toggle='collapse' data-mdb-target='#accordian-location-container' aria-expanded='false' aria-controls='accordian-location-container')
                                        .div
                                            p.mb-0.fw-bold Store                                            
                                            p.mb-0.font-small#location-number 0 filters selected
                                #accordian-location-container.accordion-collapse.collapse(aria-labelledby='accordian-location-heading')
                                    .accordion-body
                                        each location in dataObj.locations
                                            button.btn.btn-light.btn-rounded.btn-sm.mb-2.me-2(id=`location:${encodeID(location.location)}-btn` type='button' data-mdb-toggle="button" onclick=`filter('location:${location.location}', '', '', this)`)
                                                
                                                p.d-inline.me-1.pe-1 #{location.location} (#{location.total})
                                                i.cross(class="fas fa-plus")

                            .accordion-item
                                h2#accordian-pBrand-heading.accordion-header
                                    button.accordion-button.collapsed(type='button' data-mdb-toggle='collapse' data-mdb-target='#accordian-pBrand-container' aria-expanded='false' aria-controls='accordian-pBrand-container')
                                        .div
                                            p.mb-0.fw-bold Processor model                                            
                                            p.mb-0.font-small#processor_model-number 0 filters selected
                                #accordian-pBrand-container.accordion-collapse.collapse(aria-labelledby='accordian-pBrand-heading')
                                    .accordion-body
                                        each models, pbrand in dataObj.processorTypes
                                            if (pbrand == "Unknown")
                                                button.btn.btn-light.btn-rounded.btn-sm.mb-2.me-2(id=`processor_model:Unknown-btn` type='button' data-mdb-toggle="button" onclick=`filter('processor_model:Unknown', '', '', this)`)
                                                
                                                    p.d-inline.me-1.pe-1 Unknown (#{models[0].total})
                                                    i.cross(class="fas fa-plus")
                                                - delete dataObj.processorTypes[pbrand]
                                                - break
                                        each models, pbrand in dataObj.processorTypes
                                            p.fw-bold.text-center.my-2=pbrand
                                            each model in models
                                                button.btn.btn-light.btn-rounded.btn-sm.mb-2.me-2(id=`processor_model:${encodeID(model.processor_model_clean)}-btn` type='button' data-mdb-toggle="button" onclick=`filter('processor_model:${model.processor_model_clean}', '', '', this)`)
                                                
                                                    p.d-inline.me-1.pe-1 #{model.processor_model_clean}
                                                    i.cross(class="fas fa-plus")
                            .accordion-item
                                h2#accordian-ram-heading.accordion-header
                                    button.accordion-button.collapsed(type='button' data-mdb-toggle='collapse' data-mdb-target='#accordian-ram-container' aria-expanded='false' aria-controls='accordian-ram-container')
                                        .div
                                            p.mb-0.fw-bold RAM                                            
                                            p.mb-0.font-small#ram-number 0 filters selected
                                #accordian-ram-container.accordion-collapse.collapse(aria-labelledby='accordian-ram-heading')
                                    .accordion-body
                                        each ramSize in dataObj.ramSizes
                                            if (ramSize.ram_clean == "AAUnknown")
                                                button.btn.btn-light.btn-rounded.btn-sm.mb-2.me-2(id=`ram:Unknown-btn` type='button' data-mdb-toggle="button" onclick=`filter('ram:Unknown', '', '', this)`)
                                                    p.d-inline.me-1.pe-1 Unknown (#{ramSize.total})  
                                                    i.cross(class="fas fa-plus")
                                                - dataObj.ramSizes.splice(dataObj.ramSizes.indexOf(ramSize), 1)   
                                                - break
                                        each ramSize in dataObj.ramSizes
                                            button.btn.btn-light.btn-rounded.btn-sm.mb-2.me-2(id=`ram:${encodeID(ramSize.ram_clean)}-btn` type='button' data-mdb-toggle="button" onclick=`filter('ram:${ramSize.ram_clean}', '', '', this)`)
                                                p.d-inline.me-1.pe-1 #{ramSize.ram_clean} GB
                                                i.cross(class="fas fa-plus")
                            .accordion-item
                                h2#accordian-display-heading.accordion-header
                                    button.accordion-button.collapsed(type='button' data-mdb-toggle='collapse' data-mdb-target='#accordian-display-container' aria-expanded='false' aria-controls='accordian-display-container')
                                        .div
                                            p.mb-0.fw-bold Screen size                                            
                                            p.mb-0.font-small#screen_size-number 0 filters selected
                                #accordian-display-container.accordion-collapse.collapse(aria-labelledby='accordian-display-heading')
                                    .accordion-body
                                        each screenSize in dataObj.screenSizes
                                            if (screenSize.screen_clean == "AAUnknown")
                                                button.btn.btn-light.btn-rounded.btn-sm.mb-2.me-2(id=`screen_size:Unknown-btn` type='button' data-mdb-toggle="button" onclick=`filter('screen_size:Unknown', '', '', this)`)
                                                    p.d-inline.me-1.pe-1 Unknown (#{screenSize.total}) 
                                                    i.cross(class="fas fa-plus")
                                                - dataObj.screenSizes.splice(dataObj.screenSizes.indexOf(screenSize), 1)   
                                                - break
                                        each screenSize in dataObj.screenSizes
                                            button.btn.btn-light.btn-rounded.btn-sm.mb-2.me-2(id=`screen_size:${encodeID(screenSize.screen_clean)}-btn` type='button' data-mdb-toggle="button" onclick=`filter('screen_size:${screenSize.screen_clean}', '', '', this)`)
                                                p.d-inline.me-1.pe-1 #{screenSize.screen_clean} inch
                                                i.cross(class="fas fa-plus")

                            .accordion-item
                                h2#accordian-os-heading.accordion-header
                                    button.accordion-button.collapsed(type='button' data-mdb-toggle='collapse' data-mdb-target='#accordian-os-container' aria-expanded='false' aria-controls='accordian-os-container')
                                        .div
                                            p.mb-0.fw-bold Operating system                                            
                                            p.mb-0.font-small#os-number 0 filters selected
                                #accordian-os-container.accordion-collapse.collapse(aria-labelledby='accordian-os-heading')
                                    .accordion-body
                                        each os in dataObj.osTypes
                                            if (os.os_clean == "AAUnknown")
                                                button.btn.btn-light.btn-rounded.btn-sm.mb-2.me-2(id=`os:Unknown-btn` type='button' data-mdb-toggle="button" onclick=`filter('os:Unknown', '', '', this)`)
                                                    p.d-inline.me-1.pe-1 Unknown (#{os.total})
                                                    i.cross(class="fas fa-plus")
                                                - dataObj.osTypes.splice(dataObj.osTypes.indexOf(os), 1)
                                                - break
                                        each os in dataObj.osTypes
                                            button.btn.btn-light.btn-rounded.btn-sm.mb-2.me-2(id=`os:${encodeID(os.os_clean)}-btn` type='button' data-mdb-toggle="button" onclick=`filter('os:${os.os_clean}', '', '', this)`)
                                                p.d-inline.me-1.pe-1 #{os.os_clean}
                                                i.cross(class="fas fa-plus")

                            .accordion-item
                                h2#accordian-weight-heading.accordion-header
                                    button.accordion-button.collapsed(type='button' data-mdb-toggle='collapse' data-mdb-target='#accordian-weight-container' aria-expanded='false' aria-controls='accordian-weight-container')
                                        .div
                                            p.mb-0.fw-bold Weight                                            
                                            p.mb-0.font-small#select-weight-text #{dataObj.minWeight}g - #{dataObj.maxWeight}g
                                #accordian-weight-container.accordion-collapse.collapse(aria-labelledby='accordian-weight-heading')
                                    .accordion-body
                                        //- .row
                                        //-     .col-3
                                        //-         p.m-1.ms-2.font-small.align-middle#select-weight-text Weight: #{dataObj.minWeight}g - #{dataObj.maxWeight}g
                                        //-     .col-9
                                        //-         .weight-container.ms-2
                                        //-             #select-weight
                                        .d-flex.align-items-center.me-2
                                            //- p.m-1.ms-2.font-small.align-middle#select-weight-text Weight: #{dataObj.minWeight}g - #{dataObj.maxWeight}g
                                            .p.mb-0.font-small #{dataObj.minWeight}
                                            .weight-container.ms-2.flex-grow-1
                                                #select-weight
                                            .p.mb-0.font-small #{dataObj.maxWeight}
                                            
                                        .form-check.font-small.d-flex.align-items-center#weight-unknown-container.ms-2.mt-2
                                            input.form-check-input#weight-unknown(type='checkbox' value="" checked onchange="filter()")
                                            label.form-check-label.align-middle#weight-unknown-label(for='weight-unknown') Show unknown weights
                            .accordion-item
                                h2#accordian-price-heading.accordion-header
                                    button.accordion-button.collapsed(type='button' data-mdb-toggle='collapse' data-mdb-target='#accordian-price-container' aria-expanded='false' aria-controls='accordian-price-container')
                                        .div
                                            p.mb-0.fw-bold Price                                            
                                            p.mb-0.font-small#select-price-text $#{dataObj.minPrice} - $#{dataObj.maxPrice}
                                #accordian-price-container.accordion-collapse.collapse(aria-labelledby='accordian-price-heading')
                                    .accordion-body
                                        .d-flex.align-items-center.me-2
                                            //- p.m-1.ms-2.font-small.align-middle#select-price-text Price: $#{dataObj.minPrice} - $#{dataObj.maxPrice}
                                            p.font-small.mb-0 #{dataObj.minPrice}
                                            .price-container.flex-grow-1
                                                #select-price
                                            p.font-small.mb-0 #{dataObj.maxPrice}

                .modal-footer
                    //- button.btn.btn-light.fw-bold(type='button') COPY
                    //- button.btn.btn-primary(type='button' data-mdb-dismiss='modal') APPLY
                    button.btn.btn-light#clear-filters-btn(data-mdb-ripple-color="dark" onclick='clearFilters()') 
                        i#clear-filters-cross(class="fas fa-times")  
                        i#clear-filters-loading(class="fas fa-spinner fa-pulse" style='display:none')  
                        i#clear-filters-done(class="fas fa-check" style='display:none') 

                        p#clear-filters-text.fw-bold.d-inline-block.my-0.ms-2.me-0 CLEAR

                    button.btn.btn-light#copy-filters-btn(data-mdb-ripple-color="dark" onclick='copyFilters()') 
                        i#copy-link-clip(class="fas fa-clipboard")
                        i#copy-link-check(class="fas fa-check" style='display:none') 
                        p.fw-bold.d-inline-block.my-0.ms-2.me-0#copy-link-text COPY
                    button.btn.btn-primary(type='button' data-mdb-dismiss='modal') CLOSE

    script.
        
        function encodeID(string) { 
            return string.replace(/ /g, "-_-").replace(/\./g, "_-_")
        }
        let dataObj = !{stringify(dataObj)}
        if (location.href.match("search")) document.getElementById('item-container').scrollIntoView()    

        
        

        const observer = lozad(); // lazy loads elements with default selector as '.lozad'
        observer.observe();

    //- script(src="/javascripts/search.js")
    script(src="/javascripts/main.js")