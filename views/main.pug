extends layout
block content

    //- // Navigation
    //- nav.navbar.navbar-light.bg-light.static-top
    //-     .container
    //-         a.navbar-brand(href="#!") Start Bootstrap
    //-         a.btn.btn-primary(href="#signup") Sign Up
    // Masthead
    header.masthead
        .container.position-relative
            .row.justify-content-center
                .col-xl-6
                    .text-center.text-white                        
                        h1.mb-5 Search for a laptop from #{getRandomName()} and more              
                        form#searchForm(action='/' method='get')                           
                            .row
                                .col
                                    input#modelSearch.form-control.form-control-lg(type="text" placeholder="Search model..." name='search' value=original)                                    
                                .col-auto
                                    button#submitButton.btn.btn-primary.btn-lg(type="submit") Search               

    .container.py-4#overall-container
        .container
            .d-flex.justify-content-between
                if (original)
                    h4 #{numberOfModels} search results for '#{original}'
                else
                    h4 #{numberOfModels} results
                    
                //- button.btn.btn-primary.text-nowrap(onclick="toggleExpand(this)") Expand all
                button.btn.btn-primary#load-all-btn.text-nowrap.px-3(onclick='loadMore("all")')
                    i.me-2.plus-icon(class="fas fa-plus")
                    i.me-2.spinner-icon(class="fas fa-spinner fa-pulse" style='display:none')

                    p.d-inline Load all
            .d-flex.align-items-center.flex-wrap
                button.text-nowrap.me-4.btn.btn-light.px-3.my-2#toggle-filters-btn(data-mdb-ripple-color="dark" onclick='showFilters()') 
                    i(class="fas fa-filter")
                    p.fw-bold.d-inline-block.my-0.ms-2.me-0 Filters
                //- button.btn-light.btn.btn-sm Single mode
                .me-3.select-container.shadow-sm.my-2(style='display:none')        
                    select#select-brand
                        each brand in dataObj.brands
                            option(value=`brand:${brand.brand}`) #{brand.brand} (#{brand.total})

                .me-3.select-container.shadow-sm.my-2(style='display:none')                                
                    select#select-location
                        each location in dataObj.locations
                            option(value=`location:${location.location}`) #{location.location} (#{location.total})

                .me-3.select-container.shadow-sm.my-2(style='display:none')                              
                    select#select-p-brand   
                        each models, pbrand in dataObj.processorTypes
                            if (pbrand == "Unknown")
                                option(value="processor_model:Unknown") Unknown (#{models[0].total})
                                - delete dataObj.processorTypes[pbrand]
                                - break
                        each models, pbrand in dataObj.processorTypes                        
                            optgroup(label=pbrand)
                                each model in models     
                                        option(value=`processor_model:${model.processor_model_clean}`) #{model.processor_model_clean}

                        

                .me-3.select-container.shadow-sm.my-2(style='display:none')                              
                    select#select-ram
                        
                        each ramSize in dataObj.ramSizes   
                            if (ramSize.ram_clean == "AAUnknown")
                                option(value="ram:Unknown") Unknown (#{ramSize.total})  
                                - dataObj.ramSizes.splice(dataObj.ramSizes.indexOf(ramSize), 1)   
                                - break
                                                        
                        each ramSize in dataObj.ramSizes                          
                            option(value=`ram:${ramSize.ram_clean}`) #{ramSize.ram_clean} GB 
                
                .me-3.select-container.shadow-sm.my-2(style='display:none')                              
                    select#select-display                      
                        each screenSize in dataObj.screenSizes
                            if (screenSize.screen_clean == "AAUnknown")
                                option(value="screen_size:Unknown") Unknown (#{screenSize.total})
                                - dataObj.screenSizes.splice(dataObj.screenSizes.indexOf(screenSize), 1)   
                                - break
                        each screenSize in dataObj.screenSizes
                            option(value=`screen_size:${screenSize.screen_clean}`) #{screenSize.screen_clean} inch
                .me-3.select-container.shadow-sm.my-2(style='display:none')                              
                    select#select-os                      
                        each os in dataObj.osTypes
                            if (os.os_clean == "AAUnknown")
                                option(value="os:Unknown") Unknown (#{os.total})
                                - dataObj.osTypes.splice(dataObj.osTypes.indexOf(os), 1)
                                - break
                        each os in dataObj.osTypes    
                            option(value=`os:${os.os_clean}`) #{os.os_clean}
                    
                .me-3.select-container.shadow-sm.my-2.select-weight-container(style='display:none')
                    .d-flex.align-items-center.me-2.flex-wrap
                        p.m-1.ms-2.font-small.align-middle#select-weight-text Weight: #{dataObj.minWeight}g - #{dataObj.maxWeight}g
                        .weight-container.ms-2
                            #select-weight
                        .form-check.font-small.d-flex.align-items-center#weight-unknown-container.ms-2
                            input.form-check-input#weight-unknown(type='checkbox' value="" checked onchange="filter()")
                            label.form-check-label.align-middle#weight-unknown-label(for='weight-unknown') Show unknown weights

                .me-3.select-container.shadow-sm.my-2.select-price-container(style='display:none')
                    .d-flex.align-items-center.me-2.flex-wrap
                        p.m-1.ms-2.font-small.align-middle#select-price-text Price: $#{dataObj.minPrice} - $#{dataObj.maxPrice}
                        .price-container.ms-2
                            #select-price
                        
                            
                //- .me-3.select-container  
                    //- button.btn.btn-light.btn-sm 
                    //-     i(class="fas fa-clipboard")
                    //-     p.fw-bold Copy share link
                button.text-nowrap.btn-sm.btn.btn-light.px-3.my-2#copy-filters-btn.shadow-sm(data-mdb-ripple-color="dark" onclick='copyFilters()' style="display:none") 
                    i#copy-link-clip(class="fas fa-clipboard")
                    i#copy-link-check(class="fas fa-check" style='display:none') 
                    p.fw-bold.d-inline-block.my-0.ms-2.me-0#copy-link-text Copy link
        .d-flex.flex-wrap.mt-3#item-container
            - let counter = 0
            each products, model_ID in data

                - if (!modelData[model_ID]) modelData[model_ID] = [{}]
                - let model = modelData[model_ID][0]
                .col-12.col-xl-3.col-lg-4.col-md-6
                    -
                        let locations = []
                        let totalprice = []
                        for (location of Object.keys(products)) { 
                            locations.push(location)
                            for (product of products[location]) totalprice.push(Number(product.price))
                        }
                        let avgPrice = Math.round((totalprice.reduce((a, b) => a + b, 0)) / totalprice.length)

                        let filters = {
                            brand: model.brand,                            
                            processor_company: model.processor_company_clean,
                            processor_model: model.processor_model_clean,
                            ram: model.ram_clean,
                            screen_size: model.screen_clean,
                            os: model.os_clean,
                            locations,
                            weight: model.weight_clean,
                            price: avgPrice
                        }
                        
                    .card.m-2.product(data-terms=JSON.stringify(filters))
                        .bg-image.hover-overlay.ripple(data-mdb-ripple-color="light")
                            a(href=`/${model.brand}/${model_ID}`)
                                img.lozad.card-img-top.fixed-size(src='/images/loading.jpg' data-src=`${modelData[model_ID] ? (model.image_url ? model.image_url : "/images/missing.jpg") : "/images/missing.jpg"}`)
                        .card-body.parent-relative-apply.d-flex.flex-column.pb-0
                            p.text-muted.fw-light.text-center.small-text #{model.brand} #{model_ID}
                            a(href=`/${model.brand}/${model_ID}`).text-truncate.mt-2.card-title=model.name
                            .container-fluid.px-0.mt-2.pt-1
                                mixin prices(location, url)
                                    .container.mb-2.pb-2
                                        img.d-inline-block.logo-image(src=url)
                                        p.ms-2.mb-0.d-inline-block=location
                                        
                                        each product in products[location]
                                            
                                            if (product.active == 1)
                                                a.float-end(href=product.link target="_blank") $#{product.price}
                                            else
                                                a.text-decoration-line-through.float-end(href=product.link target="_blank") $#{product.price}
                                                
                                            br
                                                
                                
                                - var location = "Best Denki"
                                - var url = "/images/logos/best.jpg"
                                if products[location]
                                    +prices(location, url)
                                - var location = "Courts"
                                - var url = "/images/logos/courts.jpg"
                                if products[location]
                                    +prices(location, url)
                                - var location = "Challenger"
                                - var url = "/images/logos/challenger.jpg"
                                if products[location]
                                    +prices(location, url)
                                - var location = "Gain City"
                                - var url = "/images/logos/gain.jpg"
                                if products[location]
                                    +prices(location, url)
                                - var location = "Harvey Norman"
                                - var url = "/images/logos/harvey.jpg"
                                if products[location]
                                    +prices(location, url)





                            .card-footer.mt-auto
                                .row.mt-1
                                    .col-5
                                        p.small-text.fw-bold Processor
                                    .col-7
                                        -
                                            let processorText =`${model.processor_company} ${model.processor_model}`
                                            if (model.processor_company == "-" || model.processor_model == "-") processorText = "Unknown"

                                        p.small-text=processorText
                                .row
                                    .col-5
                                        p.small-text.fw-bold RAM
                                    .col-7
                                        -
                                            let ramText = `${model.ram} GB`
                                            if (model.ram == -1 || model.ram == 0) ramText = "Unknown"
                                        p.small-text=ramText
                                .row
                                    .col-5
                                        p.small-text.fw-bold Storage
                                    .col-7
                                        -
                                            let storageText = model.storage
                                            if (model.storage == "-" || model.storage === "") storageText == "Unknown"
                                        p.small-text=storageText

                                .container-fluid.p-0.m-0.collapse.hiding(id=`collapse-${counter}`)
                                    .row
                                        .col-5
                                            p.small-text.fw-bold Graphics
                                        .col-7
                                            -
                                                let gpuText = model.graphics_card
                                                if (model.graphics_card == "-" || model.graphics_card === "") gpuText = "Unknown"
                                            p.small-text=gpuText
                                    .row
                                        .col-5
                                            p.small-text.fw-bold Screen size
                                        .col-7
                                            -
                                                let screenSizeText = `${model.screen_size} inch`

                                                if (model.screen_size == -1 || model.screen_size == 0) screenSizeText = "Unknown"
                                            p.small-text #{screenSizeText}
                                    .row
                                        .col-5
                                            p.small-text.fw-bold Resolution
                                        .col-7
                                            -
                                                let screenResolutionText = `${model.screen_resolution_w} x ${model.screen_resolution_h}`
                                                if (model.screen_resolution_w == "-1" || model.screen_resolution_h == "-1") screenResolutionText = "Unknown"
                                            p.small-text=screenResolutionText
                                    .row
                                        .col-5
                                            p.small-text.fw-bold OS
                                        .col-7
                                            -
                                                let osText = model.os
                                                if (model.os == "-" || !model.os) osText = "Unknown"
                                            p.small-text=osText
                                    .row
                                        .col-5
                                            p.small-text.fw-bold Weight
                                        .col-7
                                            -
                                                let weightText = model.weight_clean == "Unknown" ? "Unknown" : `${Number(model.weight_clean) > 1000 ? `${Number(model.weight_clean)/1000}kg` : `${model.weight_clean}g`}`
                                            p.small-text #{weightText}
                                                
                                .row.mb-1
                                    .container.text-center
                                        a.view-more-btn(id=`button-${counter}` role='button' data-bs-toggle="collapse" data-bs-target=`#collapse-${counter}` aria-expanded="false" onclick='toggleView(this)') 
                                            p.d-inline-block.me-1 View more specs
                                            i.unflipped(class="fas fa-angle-down")


                - counter++
        .container.text-center.my-3
            if (ended)
                //- p.fst-italic#loaded-text All items loaded.
            else 
                button.btn.btn-primary#load-more-btn.px-3(onclick='loadMore()') 
                    i.me-2.plus-icon(class="fas fa-plus")
                    i.me-2.spinner-icon(class="fas fa-spinner fa-pulse" style='display:none')
                    p.d-inline Load more
                
                p.fst-italic#loaded-text(style='display:none') All items loaded.
    
    script.
        
        let dataObj = !{stringify(dataObj)}
        if (location.href.match("search")) document.getElementById('item-container').scrollIntoView()    

        
        

        const observer = lozad(); // lazy loads elements with default selector as '.lozad'
        observer.observe();

    script(src="/javascripts/search.js")
    script(src="/javascripts/main.js")